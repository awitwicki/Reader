@page "/"
@using Reader.Domain.Interfaces
@using MudBlazor
@using Reader.Domain.Enums
@using Reader.Domain.Models
@using Microsoft.JSInterop
@inject IReaderBookState ReaderBookState;
@inject IBookReaderService BookReaderService;
@inject ITranslateService TranslateService;
@inject IScrollInfoService ScrollInfoService
@inject IJSRuntime Js
@inject ISettings Settings

@* TODO if its first chapter then show section name *@
<h1>@_sectionName</h1>
<h2>@_chapterName</h2>

    @if (ReaderBookState.BookSectionContent.Value != null)
    {
        @foreach (var ff in ReaderBookState.BookSectionContent.Value!)
        {
            if (string.IsNullOrWhiteSpace(ff.Sentence))
            {
                continue;
            }

            <MudText Typo="Typo.body1">@ff.Sentence</MudText>

            <MudIconButton Icon="@Icons.Material.Filled.Translate"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="async() => await TranslateBookSentence(ff)"/>
                                                   
            if (!string.IsNullOrWhiteSpace(ff.TranslatedSentence))
            {
                <MudText Typo="Typo.body1" Color="Color.Error">@ff.TranslatedSentence</MudText>
            }
        }
    }

@code {
    string _sectionName= "";
    string _chapterName= "";
    
    protected override async Task OnInitializedAsync()
    {
        // Load preferences
        var bookSettings = await Settings.GetSettings();

        // If book selected then load it
        if (!string.IsNullOrWhiteSpace(bookSettings.BookPath))
        {
            await BookReaderService.LoadBookAsync(bookSettings.BookPath);

            _sectionName = ReaderBookState.BookSectionName.Value!;
            _chapterName = ReaderBookState.BookChapterName.Value!;
        }
        // Else load default
        else
        {
            await BookReaderService.LoadBookAsync("thebladeitself.fb2");
        }

        _sectionName = ReaderBookState.BookSectionName.Value!;
        _chapterName = ReaderBookState.BookChapterName.Value!;

        ReaderBookState.BookSectionName.OnChange += () =>
        {
            InvokeAsync(() =>
            {
                _sectionName = ReaderBookState.BookSectionName.Value!;
                StateHasChanged();
            });
        };
        
        ReaderBookState.BookChapterName.OnChange += () =>
        {
            InvokeAsync(() =>
            {
                _chapterName = ReaderBookState.BookChapterName.Value!;
                StateHasChanged();
            });
        };

        ScrollInfoService.OnScrollEnd += OnScrollEnd!;
        
        StateHasChanged();
        
        await Js.InvokeVoidAsync("scrollContentTo", bookSettings.LastBookSectionProgress);
    }

    private void OnScrollEnd(object sender, float percent)
    {
        var bookSettings = Settings.GetSettings().ConfigureAwait(false).GetAwaiter().GetResult();
        bookSettings.LastBookSectionProgress = percent;
        Settings.UpdateSettings(bookSettings);
    }

    private async Task TranslateBookSentence(BookSentence bookSentence)
    {
        bookSentence.TranslatedSentence = await TranslateService.Translate(bookSentence.Sentence, Language.Ukrainian);
    }
    
    public void Dispose()
    {
        ScrollInfoService.OnScrollEnd -= OnScrollEnd!;
    }
}

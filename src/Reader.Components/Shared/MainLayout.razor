@inherits LayoutComponentBase
@inject IReaderBookState ReaderBookState;
@using MudBlazor
@using Reader.Domain.Interfaces
@using Microsoft.JSInterop
@implements IDisposable
@inject IJSRuntime Js
@inject ISettings Settings

<MudThemeProvider Theme="_readerTheme" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>BlazorWebReader</PageTitle>

@if (_isThemeLoaded)
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => _drawerOpen = !_drawerOpen)"/>
            <MudText Typo="Typo.h6">@BookName</MudText>
            <MudSpacer/>
            
            <MudIconButton Icon="@Icons.Material.Filled.TextIncrease" Color="Color.Inherit" OnClick="FontIncrease"/>
            <MudIconButton Icon="@Icons.Material.Filled.TextDecrease" Color="Color.Inherit" OnClick="FontDecrease"/>
            <MudIconButton Icon="@ThemeBtnIcon" Color="Color.Inherit" OnClick="ToggleTheme"/>
        </MudAppBar>

        <MudDrawer @bind-Open="@_drawerOpen" Elevation="1">
            <NavMenu/>
        </MudDrawer>

        <MudMainContent>
            <MudContainer Class="mt-6">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}

@code {
    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode;
    private bool _isThemeLoaded = false;

    private string BookName => ReaderBookState.BookName.Value ?? "Reader" ;

    bool _drawerOpen = true;
    string ThemeBtnIcon => _isDarkMode ? Icons.Material.Filled.Brightness4 : Icons.Material.Filled.Brightness5;

    readonly MudTheme _readerTheme = new()
    {
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1
        },
        Typography = new Typography()
        {
            Body1 = new Body1()
            {
                FontSize = "1.25rem",
            }
        },
    };
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ReaderBookState.BookName.OnChange += StateHasChanged;
            ReaderBookState.FontSize.OnChange += OnFontChanged;

            var bookSettings = await Settings.GetSettings();
            ReaderBookState.FontSize.Value = bookSettings.FontSize;
            
            _isDarkMode = bookSettings.IsDarkMode;
                
            _isThemeLoaded = true;
            StateHasChanged();
        }
    }

    void OnFontChanged()
    {
        _readerTheme.Typography.Body1.FontSize = $"{ReaderBookState.FontSize.Value}rem";
        StateHasChanged();
    }
    
    private async Task ToggleTheme()
    {
        
        var bookSettings = Settings.GetSettings().GetAwaiter().GetResult();
        bookSettings.IsDarkMode = !bookSettings.IsDarkMode;

        await Settings.UpdateSettings(bookSettings);

        ReaderBookState.IsDarkMode.Value = bookSettings.IsDarkMode;
        _isDarkMode = bookSettings.IsDarkMode;
        
        StateHasChanged();
    }

    private void FontIncrease()
    {
        ReaderBookState.FontSize.Value += 0.25m;
        
        UpdateFontSize(ReaderBookState.FontSize.Value);
    }
    
    private void FontDecrease()
    {
        ReaderBookState.FontSize.Value -= 0.25m;
        ReaderBookState.FontSize.Value = Math.Max(1, ReaderBookState.FontSize.Value);
        
        UpdateFontSize(ReaderBookState.FontSize.Value);
    }

    void UpdateFontSize(decimal newFontSize)
    {
        var bookSettings = Settings.GetSettings().GetAwaiter().GetResult();
        bookSettings.FontSize = newFontSize;
        Settings.UpdateSettings(bookSettings);
    }
    
    void IDisposable.Dispose()
    {
        ReaderBookState.BookName.OnChange -= StateHasChanged;
    }
}

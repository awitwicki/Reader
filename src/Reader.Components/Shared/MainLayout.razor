@inherits LayoutComponentBase
@inject IReaderBookState ReaderBookState;
@using MudBlazor
@using Reader.Domain.Interfaces
@using Microsoft.JSInterop
@implements IDisposable
@inject IJSRuntime Js

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>BlazorWebReader</PageTitle>

@if (_isThemeLoaded)
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => _drawerOpen = !_drawerOpen)"/>
            <MudText Typo="Typo.h6">@BookName</MudText>
            <MudSpacer/>
            <MudIconButton Icon="@ThemeBtnIcon" Color="Color.Inherit" OnClick="ToggleTheme"/>
        </MudAppBar>

        <MudDrawer @bind-Open="@_drawerOpen" Elevation="1">
            <NavMenu/>
        </MudDrawer>

        <MudMainContent Class="pt-16 px-16">
            <MudContainer Class="mt-6">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}

@code {
    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode;
    private bool _isThemeLoaded = false;

    private string BookName => ReaderBookState.BookName.Value ?? "Reader" ;

    bool _drawerOpen = true;
    string ThemeBtnIcon => _isDarkMode ? Icons.Material.Filled.Brightness4 : Icons.Material.Filled.Brightness5;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isDarkModeStrFromLocalStorage = await Js.InvokeAsync<string>("readLocalStorage", "keyTheme");
            if (!string.IsNullOrEmpty(isDarkModeStrFromLocalStorage))
            {
                @if (isDarkModeStrFromLocalStorage == "true")
                {
                    _isDarkMode = true;
                }
            }
            
            ReaderBookState.BookName.OnChange += StateHasChanged;
            _isThemeLoaded = true;
            StateHasChanged();
        }
    }
    
    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        await Js.InvokeVoidAsync("addToLocalStorage", "keyTheme", _isDarkMode);
    }
    
    void IDisposable.Dispose()
    {
        ReaderBookState.BookName.OnChange -= StateHasChanged;
    }
}

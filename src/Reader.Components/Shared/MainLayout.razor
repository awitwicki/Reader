@inherits LayoutComponentBase
@inject IReaderBookState ReaderBookState;
@using MudBlazor
@using Reader.Domain.Interfaces
@implements IDisposable

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>BlazorWebReader</PageTitle>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => _drawerOpen = !_drawerOpen)"/>
        <MudText Typo="Typo.h6">@BookName</MudText>
    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen" Elevation="1">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="pt-16 px-16">
        <MudContainer Class="mt-6">
            @Body 
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    private string BookName => ReaderBookState.BookName.Value ?? "Reader" ;

    bool _drawerOpen = true;
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // TODO rework to theme to set in config
            //_isDarkMode = await _mudThemeProvider.GetSystemPreference();
            _isDarkMode = true;
            StateHasChanged();
        }
        
        ReaderBookState.BookName.OnChange += StateHasChanged;
        
        return Task.CompletedTask;
    }
    
    void IDisposable.Dispose()
    {
        ReaderBookState.BookName.OnChange -= StateHasChanged;
    }
}

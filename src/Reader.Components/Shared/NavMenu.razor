@inject IReaderBookState ReaderBookState;
@inject IBookReaderService BookReaderService;
@using Reader.Services
@using MudBlazor
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Options
@using Microsoft.JSInterop
@using Reader.Common.Helpers
@using Reader.Domain.Interfaces
@using Reader.Domain.Models
@implements IDisposable
@inject IJSRuntime Js
@inject ISettings Settings

<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="/counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Countertops">Counter</MudNavLink>
    <MudNavLink Href="/fetchdata" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.DataExploration">Fetch data</MudNavLink>

    <MudDivider />

    @if (ReaderBookState.BookSections.Value != null)
    {
        <MudList Clickable="true">
            @foreach (var section in ReaderBookState.BookSections.Value!)
            {
                @if (section.Chapters.Any())
                {
                    <MudListItem Text="@(section.Name)" Icon="@Icons.Material.Filled.Book" InitiallyExpanded="true">
                        <NestedList>
                            @foreach (var chapter in section.Chapters)
                            {
                                <MudListItem
                                    Class="@(SectionChapterIndexConverter.ConvertSectionChapterIndex(section.Index, chapter.Index) == _selectedChapterIndex ? "activated" : "")"
                                    OnClick="async () => await SelectBookSectionChapter(section.Index, chapter.Index)">
                                    @(chapter.Name)
                                </MudListItem>
                            }
                        </NestedList>
                    </MudListItem>
                }
                else
                {
                    <MudListItem Text="@(section.Name)" Icon="@Icons.Material.Filled.Book" Clickable="true">
                    </MudListItem>
                }
                <MudDivider/>
            }
        </MudList>
    }
    
</MudNavMenu>

@code {
    private int _selectedChapterIndex = -1;
    
    protected override void OnInitialized()
    {
        ReaderBookState.BookSections.OnChange += StateHasChanged;
        StateHasChanged();
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        
        var bookSettings = Settings.GetSettings().GetAwaiter().GetResult();
        _selectedChapterIndex = SectionChapterIndexConverter.ConvertSectionChapterIndex(bookSettings?.LastBookSectionIndex, bookSettings?.LastBookChapterIndex);
        StateHasChanged();
    }
    
    void IDisposable.Dispose()
    {
        ReaderBookState.BookSections.OnChange -= StateHasChanged;
    }

    async Task SelectBookSectionChapter(int sectionIndex, int chapterIndex)
    {
        _selectedChapterIndex = SectionChapterIndexConverter.ConvertSectionChapterIndex(sectionIndex, chapterIndex);
        BookReaderService.SelectBookSectionChapter(sectionIndex, chapterIndex);
        
        var bookSettings = await Settings.GetSettings();
        bookSettings.LastBookSectionIndex = sectionIndex;
        bookSettings.LastBookChapterIndex = chapterIndex;
        bookSettings.LastBookSectionProgress = 0;
        await Settings.UpdateSettings(bookSettings);
        
        await Js.InvokeVoidAsync("scrollContentTo", bookSettings.LastBookSectionProgress);
        
        StateHasChanged();
    }
}

@inject IReaderBookState ReaderBookState;
@inject IBookReaderService BookReaderService;
@using Reader.Services
@using MudBlazor
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using Reader.Domain.Interfaces
@implements IDisposable
@inject IJSRuntime Js
@inject ISettings Settings

<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="/counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Countertops">Counter</MudNavLink>
    <MudNavLink Href="/fetchdata" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.DataExploration">Fetch data</MudNavLink>

    <MudDivider />

    @if (ReaderBookState.BookSections.Value != null)
    {
        @foreach (var section in ReaderBookState.BookSections.Value!)
        {
            <MudListItem Icon="@Icons.Material.Filled.Book" OnClick="async () => SelectBookSection(section.Index)">@(section.Name)</MudListItem>
        }
    }
    
</MudNavMenu>

@code {
    protected override void OnInitialized()
    {
        ReaderBookState.BookSections.OnChange += StateHasChanged;
    }
    
    void IDisposable.Dispose()
    {
        ReaderBookState.BookSections.OnChange -= StateHasChanged;
    }

    async Task SelectBookSection(int sectionIndex)
    {
        BookReaderService.SelectBookSection(sectionIndex);
        
        var bookSettings = await Settings.GetSettings();
        bookSettings.LastBookSectionIndex = sectionIndex;
        bookSettings.LastBookSectionProgress = 0;
        await Settings.UpdateSettings(bookSettings);
        
        await Js.InvokeVoidAsync("scrollContentTo", bookSettings.LastBookSectionProgress);
        
        StateHasChanged();
    }
}